/*
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?
*/

/*
Splution 1. Runtime 0ms, Memory 24.56MB
*/

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* sortedSquares(int* nums, int numsSize, int* returnSize) {
    *returnSize = numsSize;
    int left = 0;
    int right = numsSize-1;
    int k = numsSize-1;

    int* result = malloc(numsSize * sizeof(int));
    for(left, right; left<=right; ){
        if(nums[left]*nums[left] > nums[right]*nums[right]){
            result[k] = nums[left]*nums[left];
            k--;
            left++;
        }
        else{
            result[k] = nums[right]*nums[right];
            k--;
            right--;
        }
    }
    return result;
}

/*
Splution 2. Runtime 0ms, Memory 24.63MB
*/

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* sortedSquares(int* nums, int numsSize, int* returnSize) {
    *returnSize = numsSize;
    int left = 0, right = numsSize - 1, k = numsSize - 1;
    int* result = (int*)malloc(numsSize * sizeof(int));

    while (left <= right) {
        int leftSq = nums[left] * nums[left];
        int rightSq = nums[right] * nums[right];

        if (leftSq > rightSq) {
            result[k--] = leftSq;
            left++;
        } else {
            result[k--] = rightSq;
            right--;
        }
    }
    return result;
}
